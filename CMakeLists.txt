cmake_policy(SET CMP0091 NEW)
cmake_minimum_required(VERSION 3.21)

project(infernal-synth)
SET(INFERNAL_VERSION "1.1")

# Build config.
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CONFIGURATION_TYPES "Debug;Release")

# Compiler flags.
if (MSVC)
add_compile_options(/W4)
add_compile_options(/WX)
add_compile_options(/wd4100)
add_compile_options(/wd4388)
add_compile_options(/wd26451)
add_compile_options(/wd26498)
add_compile_options(/wd26812)
add_compile_options(/fp:fast)
add_compile_options(/arch:AVX)
add_compile_options(/external:W0)
#add_compile_options(/Qvec-report:2)
add_definitions(-D_CRT_SECURE_NO_WARNINGS)
else ()
add_compile_options(-std=c++2a)
add_compile_options(-Wall)
add_compile_options(-Wextra)
add_compile_options(-Werror)
add_compile_options(-Wno-sign-compare)
add_compile_options(-Wno-unused-parameter)
add_compile_options(-ffast-math)
add_compile_options(-march=native)
set(CMAKE_SHARED_LIBRARY_PREFIX "")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -Wl,--no-undefined -fvisibility=hidden -fvisibility-inlines-hidden")
endif()

# Juce flags.
add_definitions(-DJUCE_USE_CURL=0)
add_definitions(-DJUCE_MODAL_LOOPS_PERMITTED=1)
add_definitions(-DJUCE_GLOBAL_MODULE_SETTINGS_INCLUDED=1)

# VST3 flags.
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DRELEASE=1")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEVELOPMENT=1")

# Juce linux dependencies.
if (NOT MSVC)
find_package(Freetype REQUIRED)
endif()

# Dependency versions.
set(HIIR_SRC_DIR ${HIIR_140_SRC_DIR})
set(JUCE_SRC_DIR ${JUCE_705_SRC_DIR})
set(VST3_SDK_SRC_DIR ${VST3_SDK_377_SRC_DIR})
set(VST3_SDK_BUILD_DEBUG_DIR ${VST3_SDK_377_BUILD_DEBUG_DIR})
set(VST3_SDK_BUILD_RELEASE_DIR ${VST3_SDK_377_BUILD_RELEASE_DIR})

# VST SDK debug binaries.
find_library(VST3_BASE_LIB_Debug base PATHS "${VST3_SDK_BUILD_DEBUG_DIR}")
find_library(VST3_SDK_LIB_Debug sdk PATHS "${VST3_SDK_BUILD_DEBUG_DIR}")
find_library(VST3_SDK_COMMON_LIB_Debug sdk_common PATHS "${VST3_SDK_BUILD_DEBUG_DIR}")
find_library(VST3_PLUGINTERFACES_LIB_Debug pluginterfaces PATHS "${VST3_SDK_BUILD_DEBUG_DIR}")
set (VST3_SDK_LIBRARIES_Debug ${VST3_SDK_LIB_Debug} ${VST3_SDK_COMMON_LIB_Debug} ${VST3_BASE_LIB_Debug} ${VST3_PLUGINTERFACES_LIB_Debug})

# VST SDK release binaries.
find_library(VST3_BASE_LIB_Release base PATHS "${VST3_SDK_BUILD_RELEASE_DIR}")
find_library(VST3_SDK_LIB_Release sdk PATHS "${VST3_SDK_BUILD_RELEASE_DIR}")
find_library(VST3_SDK_COMMON_LIB_Release sdk_common PATHS "${VST3_SDK_BUILD_RELEASE_DIR}")
find_library(VST3_PLUGINTERFACES_LIB_Release pluginterfaces PATHS "${VST3_SDK_BUILD_RELEASE_DIR}")
set (VST3_SDK_LIBRARIES_Release ${VST3_SDK_LIB_Release} ${VST3_SDK_COMMON_LIB_Release} ${VST3_BASE_LIB_Release} ${VST3_PLUGINTERFACES_LIB_Release})

# Juce project since it doesn't seem friendly to pre-built binaries. 
# Just get everything in there for a workable juce-ui-only setup.
set(JUCE_UI_SRC_DIR "src/juce.ui")
file(GLOB_RECURSE JUCE_UI_SRC "${JUCE_UI_SRC_DIR}/*.*")
add_library(juce.ui STATIC ${JUCE_UI_SRC})
target_include_directories(juce.ui PRIVATE ${JUCE_UI_SRC_DIR})
target_include_directories(juce.ui SYSTEM PRIVATE ${JUCE_SRC_DIR}/modules)
if (MSVC)
source_group(TREE "../../${JUCE_UI_SRC_DIR}" FILES ${JUCE_UI_SRC})
target_compile_options(juce.ui PRIVATE "$<$<CONFIG:Debug>:/bigobj>")
else ()
target_link_libraries(juce.ui ${FREETYPE_LIBRARIES})
target_include_directories(juce.ui PRIVATE ${FREETYPE_INCLUDE_DIRS})
endif()

# Inf base library.
set(INF_BASE_SRC_DIR "src/inf.base")
file(GLOB_RECURSE INF_BASE_SRC "${INF_BASE_SRC_DIR}/*.*")
add_library(infernal.base STATIC ${INF_BASE_SRC})
target_include_directories(infernal.base PRIVATE ${INF_BASE_SRC_DIR})
target_include_directories(infernal.base SYSTEM PRIVATE ${HIIR_SRC_DIR})
if (MSVC)
source_group(TREE "../../${INF_BASE_SRC_DIR}" FILES ${INF_BASE_SRC})
endif()

# Inf base ui library.
set(INF_BASE_UI_SRC_DIR "src/inf.base.ui")
file(GLOB_RECURSE INF_BASE_UI_SRC "${INF_BASE_UI_SRC_DIR}/*.*")
add_library(infernal.base.ui STATIC ${INF_BASE_UI_SRC})
target_include_directories(infernal.base.ui PRIVATE ${INF_BASE_UI_SRC_DIR} ${INF_BASE_SRC_DIR})
target_include_directories(infernal.base.ui SYSTEM PRIVATE ${JUCE_SRC_DIR}/modules)
target_link_libraries(infernal.base.ui infernal.base juce.ui)
if (MSVC)
source_group(TREE "../../${INF_BASE_UI_SRC_DIR}" FILES ${INF_BASE_UI_SRC})
endif()

# Inf base vst library.
set(INF_BASE_VST_SRC_DIR "src/inf.base.vst")
file(GLOB_RECURSE INF_BASE_VST_SRC "${INF_BASE_VST_SRC_DIR}/*.*")
add_library(infernal.base.vst STATIC ${INF_BASE_VST_SRC})
target_compile_definitions(infernal.base.vst PRIVATE $<$<CONFIG:Debug>:DEVELOPMENT=1>)
target_include_directories(infernal.base.vst PRIVATE ${INF_BASE_VST_SRC_DIR} ${INF_BASE_SRC_DIR} ${INF_BASE_UI_SRC_DIR})
target_include_directories(infernal.base.vst SYSTEM PRIVATE ${VST3_SDK_SRC_DIR} ${JUCE_SRC_DIR}/modules)
target_link_libraries(infernal.base.vst infernal.base infernal.base.ui juce.ui)
target_link_libraries(infernal.base.vst debug "${VST3_SDK_LIBRARIES_Debug}" optimized "${VST3_SDK_LIBRARIES_Release}")
if (MSVC)
source_group(TREE "../../${INF_BASE_VST_SRC_DIR}" FILES ${INF_BASE_VST_SRC})
target_compile_options(infernal.base.vst PRIVATE /external:I ${VST3_SDK_SRC_DIR})
endif()

# Inf synth library.
set(INF_SYNTH_SRC_DIR "src/inf.synth")
file(GLOB_RECURSE INF_SYNTH_SRC "${INF_SYNTH_SRC_DIR}/*.*")
add_library(infernal.synth STATIC ${INF_SYNTH_SRC})
target_include_directories(infernal.synth PRIVATE ${INF_SYNTH_SRC_DIR} ${INF_BASE_SRC_DIR})
target_include_directories(infernal.synth SYSTEM PRIVATE ${HIIR_SRC_DIR})
target_link_libraries(infernal.synth infernal.base)
if (MSVC)
source_group(TREE "../../${INF_SYNTH_SRC_DIR}" FILES ${INF_SYNTH_SRC})
endif()

# Inf synth ui library.
set(INF_SYNTH_UI_SRC_DIR "src/inf.synth.ui")
file(GLOB_RECURSE INF_SYNTH_UI_SRC "${INF_SYNTH_UI_SRC_DIR}/*.*")
add_library(infernal.synth.ui STATIC ${INF_SYNTH_UI_SRC})
target_include_directories(infernal.synth.ui PRIVATE ${INF_SYNTH_UI_SRC_DIR} ${INF_BASE_UI_SRC_DIR} ${INF_SYNTH_SRC_DIR} ${INF_BASE_SRC_DIR})
target_include_directories(infernal.synth.ui SYSTEM PRIVATE ${JUCE_SRC_DIR}/modules)
target_link_libraries(infernal.synth.ui infernal.synth infernal.base.ui infernal.base juce.ui)
if (MSVC)
source_group(TREE "../../${INF_SYNTH_UI_SRC_DIR}" FILES ${INF_SYNTH_UI_SRC})
endif()

# Inf synth vst generic.
set(INF_SYNTH_VST_GENERIC_SRC_DIR "src/inf.synth.vst")
file(GLOB_RECURSE INF_SYNTH_VST_GENERIC_SRC "${INF_SYNTH_VST_GENERIC_SRC_DIR}/*.*")
add_library(infernal.synth.vst.generic SHARED ${INF_SYNTH_VST_GENERIC_SRC})
target_compile_definitions(infernal.synth.vst.generic PRIVATE -DINF_VERSIONED=0)
target_include_directories(infernal.synth.vst.generic PRIVATE ${INF_BASE_SRC_DIR} ${INF_BASE_UI_SRC_DIR} ${INF_SYNTH_SRC_DIR} ${INF_SYNTH_UI_SRC_DIR} ${INF_BASE_VST_SRC_DIR} ${INF_SYNTH_VST_GENERIC_SRC_DIR})
target_include_directories(infernal.synth.vst.generic SYSTEM PRIVATE ${VST3_SDK_SRC_DIR} ${JUCE_SRC_DIR}/modules)
target_link_libraries(infernal.synth.vst.generic infernal.base infernal.base.ui infernal.synth infernal.synth.ui infernal.base.vst juce.ui)
target_link_libraries(infernal.synth.vst.generic debug "${VST3_SDK_LIBRARIES_Debug}" optimized "${VST3_SDK_LIBRARIES_Release}")
set_target_properties(infernal.synth.vst.generic PROPERTIES OUTPUT_NAME "InfernalSynthGeneric")
if (MSVC)
set_target_properties(infernal.synth.vst.generic PROPERTIES SUFFIX ".vst3")
source_group(TREE "../../${INF_SYNTH_VST_GENERIC_SRC_DIR}" FILES ${INF_SYNTH_VST_GENERIC_SRC})
target_compile_options(infernal.synth.vst.generic PRIVATE "SHELL:/external:I ${VST3_SDK_SRC_DIR}")
set_target_properties(infernal.synth.vst.generic PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/dist/win32/$<$<CONFIG:Debug>:Debug>$<$<CONFIG:Release>:Release>/InfernalSynthGeneric.vst3/Contents/x86_64-win")
add_custom_target(copy-ui-synth-generic ALL DEPENDS infernal.synth.vst.generic COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/ui "${PROJECT_SOURCE_DIR}/dist/win32/$<$<CONFIG:Debug>:Debug>$<$<CONFIG:Release>:Release>/InfernalSynthGeneric.vst3/Contents/Resources/UI")
add_custom_target(copy-presets-synth-generic ALL DEPENDS infernal.synth.vst.generic COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/presets "${PROJECT_SOURCE_DIR}/dist/win32/$<$<CONFIG:Debug>:Debug>$<$<CONFIG:Release>:Release>/InfernalSynthGeneric.vst3/Contents/Resources/Presets")
else()
set_target_properties(infernal.synth.vst.generic PROPERTIES LIBRARY_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/dist/linux/${CMAKE_BUILD_TYPE}/InfernalSynthGeneric.vst3/Contents/x86_64-linux")
add_custom_target(copy-ui-synth-generic ALL DEPENDS infernal.synth.vst.generic COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/ui "${PROJECT_SOURCE_DIR}/dist/linux/${CMAKE_BUILD_TYPE}/InfernalSynthGeneric.vst3/Contents/Resources/UI")
add_custom_target(copy-presets-synth-generic ALL DEPENDS infernal.synth.vst.generic COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/presets "${PROJECT_SOURCE_DIR}/dist/linux/${CMAKE_BUILD_TYPE}/InfernalSynthGeneric.vst3/Contents/Resources/Presets")
endif()

# Inf synth vst versioned.
set(INF_SYNTH_VST_VERSIONED_SRC_DIR "src/inf.synth.vst")
file(GLOB_RECURSE INF_SYNTH_VST_VERSIONED_SRC "${INF_SYNTH_VST_VERSIONED_SRC_DIR}/*.*")
add_library(infernal.synth.vst.versioned SHARED ${INF_SYNTH_VST_VERSIONED_SRC})
target_compile_definitions(infernal.synth.vst.versioned PRIVATE -DINF_VERSIONED=1)
target_include_directories(infernal.synth.vst.versioned PRIVATE ${INF_BASE_SRC_DIR} ${INF_BASE_UI_SRC_DIR} ${INF_SYNTH_SRC_DIR} ${INF_SYNTH_UI_SRC_DIR} ${INF_BASE_VST_SRC_DIR} ${INF_SYNTH_VST_GENERIC_SRC_DIR})
target_include_directories(infernal.synth.vst.versioned SYSTEM PRIVATE ${VST3_SDK_SRC_DIR} ${JUCE_SRC_DIR}/modules)
target_link_libraries(infernal.synth.vst.versioned infernal.base infernal.base.ui infernal.synth infernal.synth.ui infernal.base.vst juce.ui)
target_link_libraries(infernal.synth.vst.versioned debug "${VST3_SDK_LIBRARIES_Debug}" optimized "${VST3_SDK_LIBRARIES_Release}")
set_target_properties(infernal.synth.vst.versioned PROPERTIES OUTPUT_NAME "InfernalSynth${INFERNAL_VERSION}")
if (MSVC)
set_target_properties(infernal.synth.vst.versioned PROPERTIES SUFFIX ".vst3")
source_group(TREE "../../${INF_SYNTH_VST_VERSIONED_SRC_DIR}" FILES ${INF_SYNTH_VST_VERSIONED_SRC})
target_compile_options(infernal.synth.vst.versioned PRIVATE "SHELL:/external:I ${VST3_SDK_SRC_DIR}")
set_target_properties(infernal.synth.vst.versioned PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/dist/win32/$<$<CONFIG:Debug>:Debug>$<$<CONFIG:Release>:Release>/InfernalSynth${INFERNAL_VERSION}.vst3/Contents/x86_64-win")
add_custom_target(copy-ui-synth-versioned ALL DEPENDS infernal.synth.vst.versioned COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/ui "${PROJECT_SOURCE_DIR}/dist/win32/$<$<CONFIG:Debug>:Debug>$<$<CONFIG:Release>:Release>/InfernalSynth${INFERNAL_VERSION}.vst3/Contents/Resources/UI")
add_custom_target(copy-presets-synth-versioned ALL DEPENDS infernal.synth.vst.versioned COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/presets "${PROJECT_SOURCE_DIR}/dist/win32/$<$<CONFIG:Debug>:Debug>$<$<CONFIG:Release>:Release>/InfernalSynth${INFERNAL_VERSION}.vst3/Contents/Resources/Presets")
else ()
set_target_properties(infernal.synth.vst.versioned PROPERTIES LIBRARY_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/dist/linux/${CMAKE_BUILD_TYPE}/InfernalSynth${INFERNAL_VERSION}.vst3/Contents/x86_64-linux")
add_custom_target(copy-ui-synth-versioned ALL DEPENDS infernal.synth.vst.versioned COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/ui "${PROJECT_SOURCE_DIR}/dist/linux/${CMAKE_BUILD_TYPE}/InfernalSynth${INFERNAL_VERSION}.vst3/Contents/Resources/UI")
add_custom_target(copy-presets-synth-versioned ALL DEPENDS infernal.synth.vst.versioned COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/presets "${PROJECT_SOURCE_DIR}/dist/linux/${CMAKE_BUILD_TYPE}/InfernalSynth${INFERNAL_VERSION}.vst3/Contents/Resources/Presets")
endif()

# Inf vst preset diff tool.
set(INF_TOOL_VST_SRC_DIR "src/inf.tool.vst")
file(GLOB_RECURSE INF_TOOL_VST_SRC "${INF_TOOL_VST_SRC_DIR}/*.*")
add_executable(infernal.tool.vst ${INF_TOOL_VST_SRC})
target_include_directories(infernal.tool.vst PRIVATE ${INF_BASE_SRC_DIR} ${INF_BASE_VST_SRC_DIR} ${INF_TOOL_VST_SRC_DIR})
target_include_directories(infernal.tool.vst SYSTEM PRIVATE ${VST3_SDK_SRC_DIR})
target_link_libraries(infernal.tool.vst infernal.base infernal.base.vst)
target_link_libraries(infernal.tool.vst debug "${VST3_SDK_LIBRARIES_Debug}" optimized "${VST3_SDK_LIBRARIES_Release}")
if (MSVC)
source_group(TREE "../../${INF_TOOL_VST_SRC_DIR}" FILES ${INF_TOOL_VST_SRC})
target_compile_options(infernal.tool.vst PRIVATE "SHELL:/external:I ${VST3_SDK_SRC_DIR}")
else ()
target_link_libraries(infernal.tool.vst dl)
endif()
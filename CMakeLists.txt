cmake_policy(SET CMP0091 NEW)
cmake_minimum_required(VERSION 3.21)

project(infernal-synth)
SET(INFERNAL_VERSION "1.1")

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CONFIGURATION_TYPES "Debug;Release")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DRELEASE=1")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEVELOPMENT=1")

if (MSVC)
add_compile_options(/W4)
add_compile_options(/WX)
add_compile_options(/wd4100)
add_compile_options(/wd4388)
add_compile_options(/wd26451)
add_compile_options(/wd26498)
add_compile_options(/wd26812)
add_compile_options(/external:W0)
add_compile_options(/fp:fast)
add_compile_options(/arch:AVX)
#add_compile_options(/Qvec-report:2)
add_definitions(-D_CRT_SECURE_NO_WARNINGS)
string(REPLACE "/" "\\" VST_SDK_377_SRC_DIR_WIN32 ${VST_SDK_377_SRC_DIR})
else ()
add_compile_options(-std=c++2a)
add_compile_options(-Wall)
add_compile_options(-Wextra)
add_compile_options(-Werror)
add_compile_options(-Wno-sign-compare)
add_compile_options(-Wno-unused-parameter)
add_compile_options(-mavx2)
add_compile_options(-ffast-math)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
endif()

# VST SDK debug binaries.
find_library(VST3_BASE_LIB_Debug base PATHS "${VST_SDK_377_BUILD_DEBUG_DIR}")
find_library(VST3_SDK_LIB_Debug sdk PATHS "${VST_SDK_377_BUILD_DEBUG_DIR}")
find_library(VST3_SDK_COMMON_LIB_Debug sdk_common PATHS "${VST_SDK_377_BUILD_DEBUG_DIR}")
find_library(VST3_PLUGINTERFACES_LIB_Debug pluginterfaces PATHS "${VST_SDK_377_BUILD_DEBUG_DIR}")

# VSTGUI debug binaries.
find_library(VST3_VSTGUI_LIB_Debug vstgui PATHS "${VST_SDK_377_BUILD_DEBUG_DIR}")
find_library(VST3_VSTGUI_SUPPORT_LIB_Debug vstgui_support PATHS "${VST_SDK_377_BUILD_DEBUG_DIR}")
find_library(VST3_VSTGUI_UIDESCRIPTION_LIB_Debug vstgui_uidescription PATHS "${VST_SDK_377_BUILD_DEBUG_DIR}")

# VST SDK release binaries.
find_library(VST3_BASE_LIB_Release base PATHS "${VST_SDK_377_BUILD_RELEASE_DIR}")
find_library(VST3_SDK_LIB_Release sdk PATHS "${VST_SDK_377_BUILD_RELEASE_DIR}")
find_library(VST3_SDK_COMMON_LIB_Release sdk_common PATHS "${VST_SDK_377_BUILD_RELEASE_DIR}")
find_library(VST3_PLUGINTERFACES_LIB_Release pluginterfaces PATHS "${VST_SDK_377_BUILD_RELEASE_DIR}")

# VSTGUI release binaries.
find_library(VST3_VSTGUI_LIB_Release vstgui PATHS "${VST_SDK_377_BUILD_RELEASE_DIR}")
find_library(VST3_VSTGUI_SUPPORT_LIB_Release vstgui_support PATHS "${VST_SDK_377_BUILD_RELEASE_DIR}")
find_library(VST3_VSTGUI_UIDESCRIPTION_LIB_Release vstgui_uidescription PATHS "${VST_SDK_377_BUILD_RELEASE_DIR}")

# Inf base library.
set(INF_BASE_SRC_DIR "src/inf.base")
file(GLOB_RECURSE INF_BASE_SRC "${INF_BASE_SRC_DIR}/*.*")
add_library(infernal.base STATIC ${INF_BASE_SRC})
target_include_directories(infernal.base PRIVATE ${INF_BASE_SRC_DIR})
target_include_directories(infernal.base SYSTEM PRIVATE ${HIIR_140_SRC_DIR})
if (MSVC)
source_group(TREE "../../${INF_BASE_SRC_DIR}" FILES ${INF_BASE_SRC})
endif()

# Inf base ui library.
set(INF_BASE_UI_SRC_DIR "src/inf.base.ui")
file(GLOB_RECURSE INF_BASE_UI_SRC "${INF_BASE_UI_SRC_DIR}/*.*")
add_library(infernal.base.ui STATIC ${INF_BASE_UI_SRC})
target_include_directories(infernal.base.ui PRIVATE ${INF_BASE_SRC_DIR})
target_include_directories(infernal.base.ui PRIVATE ${INF_BASE_UI_SRC_DIR})
target_include_directories(infernal.base.ui SYSTEM PRIVATE ${VST_SDK_377_SRC_DIR}/vstgui4)
target_link_libraries(infernal.base.ui infernal.base)
target_link_libraries(infernal.base.ui debug "${VST3_VSTGUI_LIB_Debug}" optimized "${VST3_VSTGUI_LIB_Release}")
target_link_libraries(infernal.base.ui debug "${VST3_VSTGUI_SUPPORT_LIB_Debug}" optimized "${VST3_VSTGUI_SUPPORT_LIB_Release}")
target_link_libraries(infernal.base.ui debug "${VST3_VSTGUI_UIDESCRIPTION_LIB_Debug}" optimized "${VST3_VSTGUI_UIDESCRIPTION_LIB_Release}")
if (MSVC)
source_group(TREE "../../${INF_BASE_UI_SRC_DIR}" FILES ${INF_BASE_UI_SRC})
target_compile_options(infernal.base.ui PRIVATE /external:I ${VST_SDK_377_SRC_DIR_WIN32})
endif()

# Inf base vst library.
set(INF_BASE_VST_SRC_DIR "src/inf.base.vst")
file(GLOB_RECURSE INF_BASE_VST_SRC "${INF_BASE_VST_SRC_DIR}/*.*")
add_library(infernal.base.vst STATIC ${INF_BASE_VST_SRC})
target_compile_definitions(infernal.base.vst PRIVATE $<$<CONFIG:Debug>:DEVELOPMENT=1>)
target_include_directories(infernal.base.vst PRIVATE ${INF_BASE_VST_SRC_DIR})
target_include_directories(infernal.base.vst PRIVATE ${INF_BASE_SRC_DIR})
target_include_directories(infernal.base.vst SYSTEM PRIVATE ${VST_SDK_377_SRC_DIR})
target_link_libraries(infernal.base.vst infernal.base)
target_link_libraries(infernal.base.vst debug "${VST3_BASE_LIB_Debug}" optimized "${VST3_BASE_LIB_Release}")
target_link_libraries(infernal.base.vst debug "${VST3_SDK_LIB_Debug}" optimized "${VST3_SDK_LIB_Release}")
target_link_libraries(infernal.base.vst debug "${VST3_SDK_COMMON_LIB_Debug}" optimized "${VST3_SDK_COMMON_LIB_Release}")
target_link_libraries(infernal.base.vst debug "${VST3_PLUGINTERFACES_LIB_Debug}" optimized "${VST3_PLUGINTERFACES_LIB_Release}")
if (MSVC)
source_group(TREE "../../${INF_BASE_VST_SRC_DIR}" FILES ${INF_BASE_VST_SRC})
target_compile_options(infernal.base.vst PRIVATE /external:I ${VST_SDK_377_SRC_DIR_WIN32})
endif()

# Inf base vst ui library.
set(INF_BASE_VST_UI_SRC_DIR "src/inf.base.vst.ui")
file(GLOB_RECURSE INF_BASE_VST_UI_SRC "${INF_BASE_VST_UI_SRC_DIR}/*.*")
add_library(infernal.base.vst.ui STATIC ${INF_BASE_VST_UI_SRC})
target_compile_definitions(infernal.base.vst.ui PRIVATE $<$<CONFIG:Debug>:DEVELOPMENT=1>)
target_include_directories(infernal.base.vst.ui PRIVATE ${INF_BASE_VST_SRC_DIR})
target_include_directories(infernal.base.vst.ui PRIVATE ${INF_BASE_VST_UI_SRC_DIR})
target_include_directories(infernal.base.vst.ui PRIVATE ${INF_BASE_SRC_DIR})
target_include_directories(infernal.base.vst.ui PRIVATE ${INF_BASE_UI_SRC_DIR})
target_include_directories(infernal.base.vst.ui SYSTEM PRIVATE ${VST_SDK_377_SRC_DIR})
target_include_directories(infernal.base.vst.ui SYSTEM PRIVATE ${VST_SDK_377_SRC_DIR}/vstgui4)
target_link_libraries(infernal.base.vst.ui infernal.base)
target_link_libraries(infernal.base.vst.ui infernal.base.ui)
target_link_libraries(infernal.base.vst.ui infernal.base.vst)
target_link_libraries(infernal.base.vst.ui debug "${VST3_BASE_LIB_Debug}" optimized "${VST3_BASE_LIB_Release}")
target_link_libraries(infernal.base.vst.ui debug "${VST3_SDK_LIB_Debug}" optimized "${VST3_SDK_LIB_Release}")
target_link_libraries(infernal.base.vst.ui debug "${VST3_SDK_COMMON_LIB_Debug}" optimized "${VST3_SDK_COMMON_LIB_Release}")
target_link_libraries(infernal.base.vst.ui debug "${VST3_PLUGINTERFACES_LIB_Debug}" optimized "${VST3_PLUGINTERFACES_LIB_Release}")
target_link_libraries(infernal.base.vst.ui debug "${VST3_VSTGUI_LIB_Debug}" optimized "${VST3_VSTGUI_LIB_Release}")
target_link_libraries(infernal.base.vst.ui debug "${VST3_VSTGUI_SUPPORT_LIB_Debug}" optimized "${VST3_VSTGUI_SUPPORT_LIB_Release}")
target_link_libraries(infernal.base.vst.ui debug "${VST3_VSTGUI_UIDESCRIPTION_LIB_Debug}" optimized "${VST3_VSTGUI_UIDESCRIPTION_LIB_Release}")
if (MSVC)
source_group(TREE "../../${INF_BASE_VST_UI_SRC_DIR}" FILES ${INF_BASE_VST_UI_SRC})
target_compile_options(infernal.base.vst.ui PRIVATE /external:I ${VST_SDK_377_SRC_DIR_WIN32})
endif()

# Inf synth library.
set(INF_SYNTH_SRC_DIR "src/inf.synth")
file(GLOB_RECURSE INF_SYNTH_SRC "${INF_SYNTH_SRC_DIR}/*.*")
add_library(infernal.synth STATIC ${INF_SYNTH_SRC})
target_include_directories(infernal.synth PRIVATE ${INF_BASE_SRC_DIR})
target_include_directories(infernal.synth PRIVATE ${INF_SYNTH_SRC_DIR})
target_include_directories(infernal.synth SYSTEM PRIVATE ${HIIR_140_SRC_DIR})
target_link_libraries(infernal.synth infernal.base)
if (MSVC)
source_group(TREE "../../${INF_SYNTH_SRC_DIR}" FILES ${INF_SYNTH_SRC})
endif()

# Inf synth ui library.
set(INF_SYNTH_UI_SRC_DIR "src/inf.synth.ui")
file(GLOB_RECURSE INF_SYNTH_UI_SRC "${INF_SYNTH_UI_SRC_DIR}/*.*")
add_library(infernal.synth.ui STATIC ${INF_SYNTH_UI_SRC})
target_include_directories(infernal.synth.ui PRIVATE ${INF_BASE_SRC_DIR})
target_include_directories(infernal.synth.ui PRIVATE ${INF_SYNTH_SRC_DIR})
target_include_directories(infernal.synth.ui SYSTEM PRIVATE ${VST_SDK_377_SRC_DIR}/vstgui4)
target_link_libraries(infernal.synth.ui infernal.base)
target_link_libraries(infernal.synth.ui infernal.base.ui)
target_link_libraries(infernal.synth.ui infernal.synth)
target_link_libraries(infernal.synth.ui debug "${VST3_VSTGUI_LIB_Debug}" optimized "${VST3_VSTGUI_LIB_Release}")
target_link_libraries(infernal.synth.ui debug "${VST3_VSTGUI_SUPPORT_LIB_Debug}" optimized "${VST3_VSTGUI_SUPPORT_LIB_Release}")
target_link_libraries(infernal.synth.ui debug "${VST3_VSTGUI_UIDESCRIPTION_LIB_Debug}" optimized "${VST3_VSTGUI_UIDESCRIPTION_LIB_Release}")
if (MSVC)
source_group(TREE "../../${INF_SYNTH_SRC_UI_DIR}" FILES ${INF_SYNTH_UI_SRC})
target_compile_options(infernal.synth.ui PRIVATE /external:I ${VST_SDK_377_SRC_DIR_WIN32})
endif()

# Inf synth vst fx generic.
set(INF_SYNTH_VST_FX_GENERIC_SRC_DIR "src/inf.synth.vst.fx")
file(GLOB_RECURSE INF_SYNTH_VST_FX_GENERIC_SRC "${INF_SYNTH_VST_FX_GENERIC_SRC_DIR}/*.*")
add_library(infernal.synth.vst.fx.generic SHARED ${INF_SYNTH_VST_FX_GENERIC_SRC})
target_compile_definitions(infernal.synth.vst.fx.generic PRIVATE -DINF_VERSIONED=0)
target_include_directories(infernal.synth.vst.fx.generic PRIVATE ${INF_BASE_SRC_DIR})
target_include_directories(infernal.synth.vst.fx.generic PRIVATE ${INF_BASE_UI_SRC_DIR})
target_include_directories(infernal.synth.vst.fx.generic PRIVATE ${INF_SYNTH_SRC_DIR})
target_include_directories(infernal.synth.vst.fx.generic PRIVATE ${INF_SYNTH_UI_SRC_DIR})
target_include_directories(infernal.synth.vst.fx.generic PRIVATE ${INF_BASE_VST_SRC_DIR})
target_include_directories(infernal.synth.vst.fx.generic PRIVATE ${INF_BASE_VST_UI_SRC_DIR})
target_include_directories(infernal.synth.vst.fx.generic PRIVATE ${INF_SYNTH_VST_FX_GENERIC_SRC_DIR})
target_include_directories(infernal.synth.vst.fx.generic SYSTEM PRIVATE ${VST_SDK_377_SRC_DIR})
target_include_directories(infernal.synth.vst.fx.generic SYSTEM PRIVATE ${VST_SDK_377_SRC_DIR}/vstgui4)
target_link_libraries(infernal.synth.vst.fx.generic infernal.base)
target_link_libraries(infernal.synth.vst.fx.generic infernal.base.ui)
target_link_libraries(infernal.synth.vst.fx.generic infernal.synth)
target_link_libraries(infernal.synth.vst.fx.generic infernal.synth.ui)
target_link_libraries(infernal.synth.vst.fx.generic infernal.base.vst)
target_link_libraries(infernal.synth.vst.fx.generic infernal.base.vst.ui)
set_target_properties(infernal.synth.vst.fx.generic PROPERTIES SUFFIX ".vst3")
set_target_properties(infernal.synth.vst.fx.generic PROPERTIES OUTPUT_NAME "InfernalSynthFX")
set_target_properties(infernal.synth.vst.fx.generic PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_BINARY_DIR}/Debug/InfernalSynth/Generic/InfernalSynthFX.vst3/Contents/x86_64-win")
set_target_properties(infernal.synth.vst.fx.generic PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/Release/InfernalSynth/Generic/InfernalSynthFX.vst3/Contents/x86_64-win")
add_custom_target(copy-ui-synth-fx-generic-debug ALL DEPENDS infernal.synth.vst.fx.generic COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/ui ${CMAKE_BINARY_DIR}/Debug/InfernalSynth/Generic/InfernalSynthFX.vst3/Contents/Resources/UI)
add_custom_target(copy-ui-synth-fx-generic-release ALL DEPENDS infernal.synth.vst.fx.generic COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/ui ${CMAKE_BINARY_DIR}/Release/InfernalSynth/Generic/InfernalSynthFX.vst3/Contents/Resources/UI)
add_custom_target(copy-presets-synth-fx-generic-debug ALL DEPENDS infernal.synth.vst.fx.generic COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/presets/fx ${CMAKE_BINARY_DIR}/Debug/InfernalSynth/Generic/InfernalSynthFX.vst3/Contents/Resources/Presets)
add_custom_target(copy-presets-synth-fx-generic-release ALL DEPENDS infernal.synth.vst.fx.generic COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/presets/fx ${CMAKE_BINARY_DIR}/Release/InfernalSynth/Generic/InfernalSynthFX.vst3/Contents/Resources/Presets)

if (MSVC)
source_group(TREE "../../${INF_SYNTH_VST_FX_GENERIC_SRC_DIR}" FILES ${INF_SYNTH_VST_FX_GENERIC_SRC})
target_compile_options(infernal.synth.vst.fx.generic PRIVATE /external:I ${VST_SDK_377_SRC_DIR_WIN32})
endif()

# Inf synth vst fx versioned.
set(INF_SYNTH_VST_FX_VERSIONED_SRC_DIR "src/inf.synth.vst.fx")
file(GLOB_RECURSE INF_SYNTH_VST_FX_VERSIONED_SRC "${INF_SYNTH_VST_FX_VERSIONED_SRC_DIR}/*.*")
add_library(infernal.synth.vst.fx.versioned SHARED ${INF_SYNTH_VST_FX_VERSIONED_SRC})
target_compile_definitions(infernal.synth.vst.fx.versioned PRIVATE -DINF_VERSIONED=1)
target_include_directories(infernal.synth.vst.fx.versioned PRIVATE ${INF_BASE_SRC_DIR})
target_include_directories(infernal.synth.vst.fx.versioned PRIVATE ${INF_BASE_UI_SRC_DIR})
target_include_directories(infernal.synth.vst.fx.versioned PRIVATE ${INF_SYNTH_SRC_DIR})
target_include_directories(infernal.synth.vst.fx.versioned PRIVATE ${INF_SYNTH_UI_SRC_DIR})
target_include_directories(infernal.synth.vst.fx.versioned PRIVATE ${INF_BASE_VST_SRC_DIR})
target_include_directories(infernal.synth.vst.fx.versioned PRIVATE ${INF_BASE_VST_UI_SRC_DIR})
target_include_directories(infernal.synth.vst.fx.versioned PRIVATE ${INF_SYNTH_VST_FX_VERSIONED_SRC_DIR})
target_include_directories(infernal.synth.vst.fx.versioned SYSTEM PRIVATE ${VST_SDK_377_SRC_DIR})
target_include_directories(infernal.synth.vst.fx.versioned SYSTEM PRIVATE ${VST_SDK_377_SRC_DIR}/vstgui4)
target_link_libraries(infernal.synth.vst.fx.versioned infernal.base)
target_link_libraries(infernal.synth.vst.fx.versioned infernal.base.ui)
target_link_libraries(infernal.synth.vst.fx.versioned infernal.synth)
target_link_libraries(infernal.synth.vst.fx.versioned infernal.synth.ui)
target_link_libraries(infernal.synth.vst.fx.versioned infernal.base.vst)
target_link_libraries(infernal.synth.vst.fx.versioned infernal.base.vst.ui)
set_target_properties(infernal.synth.vst.fx.versioned PROPERTIES SUFFIX ".vst3")
set_target_properties(infernal.synth.vst.fx.versioned PROPERTIES OUTPUT_NAME "InfernalSynthFX${INFERNAL_VERSION}")
set_target_properties(infernal.synth.vst.fx.versioned PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_BINARY_DIR}/Debug/InfernalSynth/Versioned/InfernalSynthFX${INFERNAL_VERSION}.vst3/Contents/x86_64-win")
set_target_properties(infernal.synth.vst.fx.versioned PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/Release/InfernalSynth/Versioned/InfernalSynthFX${INFERNAL_VERSION}.vst3/Contents/x86_64-win")
add_custom_target(copy-ui-synth-fx-versioned-debug ALL DEPENDS infernal.synth.vst.fx.versioned COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/ui ${CMAKE_BINARY_DIR}/Debug/InfernalSynth/Versioned/InfernalSynthFX${INFERNAL_VERSION}.vst3/Contents/Resources/UI)
add_custom_target(copy-ui-synth-fx-versioned-release ALL DEPENDS infernal.synth.vst.fx.versioned COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/ui ${CMAKE_BINARY_DIR}/Release/InfernalSynth/Versioned/InfernalSynthFX${INFERNAL_VERSION}.vst3/Contents/Resources/UI)
add_custom_target(copy-presets-synth-fx-versioned-debug ALL DEPENDS infernal.synth.vst.fx.versioned COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/presets/fx ${CMAKE_BINARY_DIR}/Debug/InfernalSynth/Versioned/InfernalSynthFX${INFERNAL_VERSION}.vst3/Contents/Resources/Presets)
add_custom_target(copy-presets-synth-fx-versioned-release ALL DEPENDS infernal.synth.vst.fx.versioned COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/presets/fx ${CMAKE_BINARY_DIR}/Release/InfernalSynth/Versioned/InfernalSynthFX${INFERNAL_VERSION}.vst3/Contents/Resources/Presets)

if (MSVC)
source_group(TREE "../../${INF_SYNTH_VST_FX_VERSIONED_SRC_DIR}" FILES ${INF_SYNTH_VST_FX_VERSIONED_SRC})
target_compile_options(infernal.synth.vst.fx.versioned PRIVATE /external:I ${VST_SDK_377_SRC_DIR_WIN32})
endif()

# Inf synth vst instrument generic.
set(INF_SYNTH_VST_INSTRUMENT_GENERIC_SRC_DIR "src/inf.synth.vst.instrument")
file(GLOB_RECURSE INF_SYNTH_VST_INSTRUMENT_GENERIC_SRC "${INF_SYNTH_VST_INSTRUMENT_GENERIC_SRC_DIR}/*.*")
add_library(infernal.synth.vst.instrument.generic SHARED ${INF_SYNTH_VST_INSTRUMENT_GENERIC_SRC})
target_compile_definitions(infernal.synth.vst.instrument.generic PRIVATE -DINF_VERSIONED=0)
target_include_directories(infernal.synth.vst.instrument.generic PRIVATE ${INF_BASE_SRC_DIR})
target_include_directories(infernal.synth.vst.instrument.generic PRIVATE ${INF_BASE_UI_SRC_DIR})
target_include_directories(infernal.synth.vst.instrument.generic PRIVATE ${INF_SYNTH_SRC_DIR})
target_include_directories(infernal.synth.vst.instrument.generic PRIVATE ${INF_SYNTH_UI_SRC_DIR})
target_include_directories(infernal.synth.vst.instrument.generic PRIVATE ${INF_BASE_VST_SRC_DIR})
target_include_directories(infernal.synth.vst.instrument.generic PRIVATE ${INF_BASE_VST_UI_SRC_DIR})
target_include_directories(infernal.synth.vst.instrument.generic PRIVATE ${INF_SYNTH_VST_INSTRUMENT_GENERIC_SRC_DIR})
target_include_directories(infernal.synth.vst.instrument.generic SYSTEM PRIVATE ${VST_SDK_377_SRC_DIR})
target_include_directories(infernal.synth.vst.instrument.generic SYSTEM PRIVATE ${VST_SDK_377_SRC_DIR}/vstgui4)
target_link_libraries(infernal.synth.vst.instrument.generic infernal.base)
target_link_libraries(infernal.synth.vst.instrument.generic infernal.base.ui)
target_link_libraries(infernal.synth.vst.instrument.generic infernal.synth)
target_link_libraries(infernal.synth.vst.instrument.generic infernal.synth.ui)
target_link_libraries(infernal.synth.vst.instrument.generic infernal.base.vst)
target_link_libraries(infernal.synth.vst.instrument.generic infernal.base.vst.ui)
set_target_properties(infernal.synth.vst.instrument.generic PROPERTIES SUFFIX ".vst3")
set_target_properties(infernal.synth.vst.instrument.generic PROPERTIES OUTPUT_NAME "InfernalSynth")
set_target_properties(infernal.synth.vst.instrument.generic PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_BINARY_DIR}/Debug/InfernalSynth/Generic/InfernalSynth.vst3/Contents/x86_64-win")
set_target_properties(infernal.synth.vst.instrument.generic PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/Release/InfernalSynth/Generic/InfernalSynth.vst3/Contents/x86_64-win")
add_custom_target(copy-ui-synth-instrument-generic-debug ALL DEPENDS infernal.synth.vst.instrument.generic COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/ui ${CMAKE_BINARY_DIR}/Debug/InfernalSynth/Generic/InfernalSynth.vst3/Contents/Resources/UI)
add_custom_target(copy-ui-synth-instrument-generic-release ALL DEPENDS infernal.synth.vst.instrument.generic COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/ui ${CMAKE_BINARY_DIR}/Release/InfernalSynth/Generic/InfernalSynth.vst3/Contents/Resources/UI)
add_custom_target(copy-presets-synth-instrument-generic-debug ALL DEPENDS infernal.synth.vst.instrument.generic COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/presets/instrument ${CMAKE_BINARY_DIR}/Debug/InfernalSynth/Generic/InfernalSynth.vst3/Contents/Resources/Presets)
add_custom_target(copy-presets-synth-instrument-generic-release ALL DEPENDS infernal.synth.vst.instrument.generic COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/presets/instrument ${CMAKE_BINARY_DIR}/Release/InfernalSynth/Generic/InfernalSynth.vst3/Contents/Resources/Presets)

if (MSVC)
source_group(TREE "../../${INF_SYNTH_VST_INSTRUMENT_GENERIC_SRC_DIR}" FILES ${INF_SYNTH_VST_INSTRUMENT_GENERIC_SRC})
target_compile_options(infernal.synth.vst.instrument.generic PRIVATE /external:I ${VST_SDK_377_SRC_DIR_WIN32})
endif()

# Inf synth vst instrument versioned.
set(INF_SYNTH_VST_INSTRUMENT_VERSIONED_SRC_DIR "src/inf.synth.vst.instrument")
file(GLOB_RECURSE INF_SYNTH_VST_INSTRUMENT_VERSIONED_SRC "${INF_SYNTH_VST_INSTRUMENT_VERSIONED_SRC_DIR}/*.*")
add_library(infernal.synth.vst.instrument.versioned SHARED ${INF_SYNTH_VST_INSTRUMENT_VERSIONED_SRC})
target_compile_definitions(infernal.synth.vst.instrument.versioned PRIVATE -DINF_VERSIONED=1)
target_include_directories(infernal.synth.vst.instrument.versioned PRIVATE ${INF_BASE_SRC_DIR})
target_include_directories(infernal.synth.vst.instrument.versioned PRIVATE ${INF_BASE_UI_SRC_DIR})
target_include_directories(infernal.synth.vst.instrument.versioned PRIVATE ${INF_SYNTH_SRC_DIR})
target_include_directories(infernal.synth.vst.instrument.versioned PRIVATE ${INF_SYNTH_UI_SRC_DIR})
target_include_directories(infernal.synth.vst.instrument.versioned PRIVATE ${INF_BASE_VST_SRC_DIR})
target_include_directories(infernal.synth.vst.instrument.versioned PRIVATE ${INF_BASE_VST_UI_SRC_DIR})
target_include_directories(infernal.synth.vst.instrument.versioned PRIVATE ${INF_SYNTH_VST_INSTRUMENT_VERSIONED_SRC_DIR})
target_include_directories(infernal.synth.vst.instrument.versioned SYSTEM PRIVATE ${VST_SDK_377_SRC_DIR})
target_include_directories(infernal.synth.vst.instrument.versioned SYSTEM PRIVATE ${VST_SDK_377_SRC_DIR}/vstgui4)
target_link_libraries(infernal.synth.vst.instrument.versioned infernal.base)
target_link_libraries(infernal.synth.vst.instrument.versioned infernal.base.ui)
target_link_libraries(infernal.synth.vst.instrument.versioned infernal.synth)
target_link_libraries(infernal.synth.vst.instrument.versioned infernal.synth.ui)
target_link_libraries(infernal.synth.vst.instrument.versioned infernal.base.vst)
target_link_libraries(infernal.synth.vst.instrument.versioned infernal.base.vst.ui)
set_target_properties(infernal.synth.vst.instrument.versioned PROPERTIES SUFFIX ".vst3")
set_target_properties(infernal.synth.vst.instrument.versioned PROPERTIES OUTPUT_NAME "InfernalSynth${INFERNAL_VERSION}")
set_target_properties(infernal.synth.vst.instrument.versioned PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_BINARY_DIR}/Debug/InfernalSynth/Versioned/InfernalSynth${INFERNAL_VERSION}.vst3/Contents/x86_64-win")
set_target_properties(infernal.synth.vst.instrument.versioned PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/Release/InfernalSynth/Versioned/InfernalSynth${INFERNAL_VERSION}.vst3/Contents/x86_64-win")
add_custom_target(copy-ui-synth-instrument-versioned-debug ALL DEPENDS infernal.synth.vst.instrument.versioned COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/ui ${CMAKE_BINARY_DIR}/Debug/InfernalSynth/Versioned/InfernalSynth${INFERNAL_VERSION}.vst3/Contents/Resources/UI)
add_custom_target(copy-ui-synth-instrument-versioned-release ALL DEPENDS infernal.synth.vst.instrument.versioned COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/ui ${CMAKE_BINARY_DIR}/Release/InfernalSynth/Versioned/InfernalSynth${INFERNAL_VERSION}.vst3/Contents/Resources/UI)
add_custom_target(copy-presets-synth-instrument-versioned-debug ALL DEPENDS infernal.synth.vst.instrument.versioned COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/presets/instrument ${CMAKE_BINARY_DIR}/Debug/InfernalSynth/Versioned/InfernalSynth${INFERNAL_VERSION}.vst3/Contents/Resources/Presets)
add_custom_target(copy-presets-synth-instrument-versioned-release ALL DEPENDS infernal.synth.vst.instrument.versioned COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/presets/instrument ${CMAKE_BINARY_DIR}/Release/InfernalSynth/Versioned/InfernalSynth${INFERNAL_VERSION}.vst3/Contents/Resources/Presets)

if (MSVC)
source_group(TREE "../../${INF_SYNTH_VST_INSTRUMENT_VERSIONED_SRC_DIR}" FILES ${INF_SYNTH_VST_INSTRUMENT_VERSIONED_SRC})
target_compile_options(infernal.synth.vst.instrument.versioned PRIVATE /external:I ${VST_SDK_377_SRC_DIR_WIN32})
endif()

# Inf tool vst ui generator and preset diff tool.
set(INF_TOOL_VST_SRC_DIR "src/inf.tool.vst")
file(GLOB_RECURSE INF_TOOL_VST_SRC "${INF_TOOL_VST_SRC_DIR}/*.*")
add_executable(infernal.tool.vst ${INF_TOOL_VST_SRC})
target_include_directories(infernal.tool.vst PRIVATE ${INF_BASE_SRC_DIR})
target_include_directories(infernal.tool.vst PRIVATE ${INF_BASE_UI_SRC_DIR})
target_include_directories(infernal.tool.vst PRIVATE ${INF_BASE_VST_SRC_DIR})
target_include_directories(infernal.tool.vst PRIVATE ${INF_BASE_VST_UI_SRC_DIR})
target_include_directories(infernal.tool.vst PRIVATE ${INF_TOOL_VST_SRC_DIR})
target_include_directories(infernal.tool.vst SYSTEM PRIVATE ${VST_SDK_377_SRC_DIR})
target_include_directories(infernal.tool.vst SYSTEM PRIVATE ${VST_SDK_377_SRC_DIR}/vstgui4)
target_link_libraries(infernal.tool.vst infernal.base)
target_link_libraries(infernal.tool.vst infernal.base.ui)
target_link_libraries(infernal.tool.vst infernal.base.vst)
target_link_libraries(infernal.tool.vst infernal.base.vst.ui)
if (MSVC)
source_group(TREE "../../${INF_TOOL_VST_SRC_DIR}" FILES ${INF_TOOL_VST_SRC})
target_compile_options(infernal.tool.vst PRIVATE /external:I ${VST_SDK_377_SRC_DIR_WIN32})
else ()
target_link_libraries(infernal.tool.vst dl)
endif()

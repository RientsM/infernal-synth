cmake_policy(SET CMP0091 NEW)
cmake_minimum_required(VERSION 3.21)

project(infernal-synth)
SET(INFERNAL_VERSION "1.1")

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CONFIGURATION_TYPES "Debug;Release")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DRELEASE=1")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEVELOPMENT=1")
add_definitions(-DINFERNAL_ENABLE_FIXES=1)
add_definitions(-DINFERNAL_ENABLE_CHANGES=1)

if (MSVC)
add_compile_options(/W4)
add_compile_options(/WX)
add_compile_options(/wd4100)
add_compile_options(/wd4388)
add_compile_options(/wd26451)
add_compile_options(/wd26498)
add_compile_options(/wd26812)
add_compile_options(/fp:fast)
add_compile_options(/arch:AVX)
add_compile_options(/external:W0)
#add_compile_options(/Qvec-report:2)
add_definitions(-D_CRT_SECURE_NO_WARNINGS)
else ()
add_compile_options(-std=c++2a)
add_compile_options(-Wall)
add_compile_options(-Wextra)
add_compile_options(-Werror)
add_compile_options(-Wno-sign-compare)
add_compile_options(-Wno-unused-parameter)
add_compile_options(-ffast-math)
add_compile_options(-march=native)
set(CMAKE_SHARED_LIBRARY_PREFIX "")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
endif()

# Linux ui libs needed by vstgui.
if (NOT MSVC)
find_package(X11 REQUIRED)
find_package(Freetype REQUIRED)
find_package(PkgConfig REQUIRED)
pkg_check_modules(LIBEXPAT REQUIRED expat)
pkg_check_modules(LIBXCB REQUIRED xcb)
pkg_check_modules(LIBXCB_UTIL REQUIRED xcb-util)
pkg_check_modules(LIBXCB_CURSOR REQUIRED xcb-cursor)
pkg_check_modules(LIBXCB_KEYSYMS REQUIRED xcb-keysyms)
pkg_check_modules(LIBXCB_XKB REQUIRED xcb-xkb)
pkg_check_modules(LIBXKB_COMMON REQUIRED xkbcommon)
pkg_check_modules(LIBXKB_COMMON_X11 REQUIRED xkbcommon-x11)
pkg_check_modules(GLIB REQUIRED glib-2.0)
pkg_check_modules(FONTCONFIG REQUIRED fontconfig)
pkg_check_modules(PANGO REQUIRED pango)
pkg_check_modules(PANGOCAIRO REQUIRED pangocairo)
pkg_check_modules(PANGOFT2 REQUIRED pangoft2)
pkg_check_modules(CAIRO REQUIRED cairo)
set(VSTGUI_LINUX_LIBRARIES
  ${X11_LIBRARIES} ${FREETYPE_LIBRARIES} ${LIBEXPAT_LIBRARIES} ${LIBXCB_LIBRARIES} ${LIBXCB_UTIL_LIBRARIES} ${LIBXCB_CURSOR_LIBRARIES} 
  ${LIBXCB_KEYSYMS_LIBRARIES} ${LIBXCB_XKB_LIBRARIES} ${LIBXKB_COMMON_LIBRARIES} ${LIBXKB_COMMON_X11_LIBRARIES} ${GLIB_LIBRARIES} 
  ${PANGO_LIBRARIES} ${PANGOFT2_LIBRARIES} ${PANGOCAIRO_LIBRARIES} ${CAIRO_LIBRARIES} ${FONTCONFIG_LIBRARIES} dl)
endif()

# VST3 sdk libraries, should be setup already.
set (VST3_SDK_SRC_DIR "${PROJECT_SOURCE_DIR}/vst3sdk")
if (MSVC)
set (VST3_SDK_BUILD_DEBUG_DIR "${PROJECT_SOURCE_DIR}/build/vst3sdk/win32/lib/Debug")
set (VST3_SDK_BUILD_RELEASE_DIR "${PROJECT_SOURCE_DIR}/build/vst3sdk/win32/lib/Release")
else ()
set (VST3_SDK_BUILD_DEBUG_DIR "${PROJECT_SOURCE_DIR}/build/vst3sdk/linux/debug/lib/Debug")
set (VST3_SDK_BUILD_RELEASE_DIR "${PROJECT_SOURCE_DIR}/build/vst3sdk/linux/release/lib/Release")
endif ()

# VSTGUI fork debug binaries.
find_library(VSTGUI_LIB_Debug vstgui PATHS "${VST3_SDK_BUILD_DEBUG_DIR}")
find_library(VSTGUI_SUPPORT_LIB_Debug vstgui_support PATHS "${VST3_SDK_BUILD_DEBUG_DIR}")
find_library(VSTGUI_UIDESCRIPTION_LIB_Debug vstgui_uidescription PATHS "${VST3_SDK_BUILD_DEBUG_DIR}")
set (VSTGUI_LIBRARIES_Debug ${VSTGUI_LIB_Debug} ${VSTGUI_UIDESCRIPTION_LIB_Debug} ${VSTGUI_SUPPORT_LIB_Debug})

# VSTGUI fork release binaries.
find_library(VSTGUI_LIB_Release vstgui PATHS "${VST3_SDK_BUILD_RELEASE_DIR}")
find_library(VSTGUI_SUPPORT_LIB_Release vstgui_support PATHS "${VST3_SDK_BUILD_RELEASE_DIR}")
find_library(VSTGUI_UIDESCRIPTION_LIB_Release vstgui_uidescription PATHS "${VST3_SDK_BUILD_RELEASE_DIR}")
set (VSTGUI_LIBRARIES_Release ${VSTGUI_LIB_Release} ${VSTGUI_UIDESCRIPTION_LIB_Release} ${VSTGUI_SUPPORT_LIB_Release})

# VST SDK debug binaries.
find_library(VST3_BASE_LIB_Debug base PATHS "${VST3_SDK_BUILD_DEBUG_DIR}")
find_library(VST3_SDK_LIB_Debug sdk PATHS "${VST3_SDK_BUILD_DEBUG_DIR}")
find_library(VST3_SDK_COMMON_LIB_Debug sdk_common PATHS "${VST3_SDK_BUILD_DEBUG_DIR}")
find_library(VST3_PLUGINTERFACES_LIB_Debug pluginterfaces PATHS "${VST3_SDK_BUILD_DEBUG_DIR}")
set (VST3_SDK_LIBRARIES_Debug ${VST3_BASE_LIB_Debug} ${VST3_SDK_LIB_Debug} ${VST3_SDK_COMMON_LIB_Debug} ${VST3_PLUGINTERFACES_LIB_Debug})

# VST SDK release binaries.
find_library(VST3_BASE_LIB_Release base PATHS "${VST3_SDK_BUILD_RELEASE_DIR}")
find_library(VST3_SDK_LIB_Release sdk PATHS "${VST3_SDK_BUILD_RELEASE_DIR}")
find_library(VST3_SDK_COMMON_LIB_Release sdk_common PATHS "${VST3_SDK_BUILD_RELEASE_DIR}")
find_library(VST3_PLUGINTERFACES_LIB_Release pluginterfaces PATHS "${VST3_SDK_BUILD_RELEASE_DIR}")
set (VST3_SDK_LIBRARIES_Release ${VST3_BASE_LIB_Release} ${VST3_SDK_LIB_Release} ${VST3_SDK_COMMON_LIB_Release} ${VST3_PLUGINTERFACES_LIB_Release})

# Inf base library.
set(INF_BASE_SRC_DIR "src/inf.base")
file(GLOB_RECURSE INF_BASE_SRC "${INF_BASE_SRC_DIR}/*.*")
add_library(infernal.base STATIC ${INF_BASE_SRC})
target_include_directories(infernal.base PRIVATE ${INF_BASE_SRC_DIR})
target_include_directories(infernal.base SYSTEM PRIVATE ${HIIR_140_SRC_DIR})
if (MSVC)
source_group(TREE "../../../${INF_BASE_SRC_DIR}" FILES ${INF_BASE_SRC})
endif()

# Inf base ui library.
set(INF_BASE_UI_SRC_DIR "src/inf.base.ui")
file(GLOB_RECURSE INF_BASE_UI_SRC "${INF_BASE_UI_SRC_DIR}/*.*")
add_library(infernal.base.ui STATIC ${INF_BASE_UI_SRC})
target_include_directories(infernal.base.ui PRIVATE ${INF_BASE_UI_SRC_DIR} ${INF_BASE_SRC_DIR})
target_include_directories(infernal.base.ui SYSTEM PRIVATE ${VST3_SDK_SRC_DIR}/vstgui4)
target_link_libraries(infernal.base.ui infernal.base)
target_link_libraries(infernal.base.ui debug "${VSTGUI_LIBRARIES_Debug}" optimized "${VSTGUI_LIBRARIES_Release}")
target_link_libraries(infernal.base.ui "${VSTGUI_LINUX_LIBRARIES}")
if (MSVC)
source_group(TREE "../../../${INF_BASE_UI_SRC_DIR}" FILES ${INF_BASE_UI_SRC})
target_compile_options(infernal.base.ui PRIVATE /external:I ${VST3_SDK_SRC_DIR}/vstgui4)
endif()

# Inf base vst library.
set(INF_BASE_VST_SRC_DIR "src/inf.base.vst")
file(GLOB_RECURSE INF_BASE_VST_SRC "${INF_BASE_VST_SRC_DIR}/*.*")
add_library(infernal.base.vst STATIC ${INF_BASE_VST_SRC})
target_compile_definitions(infernal.base.vst PRIVATE $<$<CONFIG:Debug>:DEVELOPMENT=1>)
target_include_directories(infernal.base.vst PRIVATE ${INF_BASE_VST_SRC_DIR} ${INF_BASE_SRC_DIR})
target_include_directories(infernal.base.vst SYSTEM PRIVATE ${VST3_SDK_SRC_DIR})
target_link_libraries(infernal.base.vst infernal.base)
target_link_libraries(infernal.base.vst debug "${VST3_SDK_LIBRARIES_Debug}" optimized "${VST3_SDK_LIBRARIES_Release}")
if (MSVC)
source_group(TREE "../../../${INF_BASE_VST_SRC_DIR}" FILES ${INF_BASE_VST_SRC})
target_compile_options(infernal.base.vst PRIVATE /external:I ${VST3_SDK_SRC_DIR})
endif()

# Inf base vst ui library.
set(INF_BASE_VST_UI_SRC_DIR "src/inf.base.vst.ui")
file(GLOB_RECURSE INF_BASE_VST_UI_SRC "${INF_BASE_VST_UI_SRC_DIR}/*.*")
add_library(infernal.base.vst.ui STATIC ${INF_BASE_VST_UI_SRC})
target_compile_definitions(infernal.base.vst.ui PRIVATE $<$<CONFIG:Debug>:DEVELOPMENT=1>)
target_include_directories(infernal.base.vst.ui PRIVATE ${INF_BASE_VST_UI_SRC_DIR} ${INF_BASE_VST_SRC_DIR} ${INF_BASE_SRC_DIR} ${INF_BASE_UI_SRC_DIR})
target_include_directories(infernal.base.vst.ui SYSTEM PRIVATE ${VST3_SDK_SRC_DIR} ${VST3_SDK_SRC_DIR}/vstgui4)
target_link_libraries(infernal.base.vst.ui infernal.base infernal.base.ui infernal.base.vst)
target_link_libraries(infernal.base.vst.ui debug "${VSTGUI_LIBRARIES_Debug}" optimized "${VSTGUI_LIBRARIES_Release}")
target_link_libraries(infernal.base.vst.ui debug "${VST3_SDK_LIBRARIES_Debug}" optimized "${VST3_SDK_LIBRARIES_Release}")
target_link_libraries(infernal.base.vst.ui "${VSTGUI_LINUX_LIBRARIES}")
if (MSVC)
source_group(TREE "../../../${INF_BASE_VST_UI_SRC_DIR}" FILES ${INF_BASE_VST_UI_SRC})
target_compile_options(infernal.base.vst.ui PRIVATE "SHELL:/external:I ${VST3_SDK_SRC_DIR}/vstgui4" "SHELL:/external:I ${VST3_SDK_SRC_DIR}")
endif()

# Inf synth library.
set(INF_SYNTH_SRC_DIR "src/inf.synth")
file(GLOB_RECURSE INF_SYNTH_SRC "${INF_SYNTH_SRC_DIR}/*.*")
add_library(infernal.synth STATIC ${INF_SYNTH_SRC})
target_include_directories(infernal.synth PRIVATE ${INF_SYNTH_SRC_DIR} ${INF_BASE_SRC_DIR})
target_include_directories(infernal.synth SYSTEM PRIVATE ${HIIR_140_SRC_DIR})
target_link_libraries(infernal.synth infernal.base)
if (MSVC)
source_group(TREE "../../../${INF_SYNTH_SRC_DIR}" FILES ${INF_SYNTH_SRC})
endif()

# Inf synth vst generic.
set(INF_SYNTH_VST_GENERIC_SRC_DIR "src/inf.synth.vst")
file(GLOB_RECURSE INF_SYNTH_VST_GENERIC_SRC "${INF_SYNTH_VST_GENERIC_SRC_DIR}/*.*")
add_library(infernal.synth.vst.generic SHARED ${INF_SYNTH_VST_GENERIC_SRC})
target_compile_definitions(infernal.synth.vst.generic PRIVATE -DINF_VERSIONED=0)
target_include_directories(infernal.synth.vst.generic PRIVATE ${INF_BASE_SRC_DIR} ${INF_BASE_UI_SRC_DIR} ${INF_SYNTH_SRC_DIR} ${INF_SYNTH_UI_SRC_DIR} ${INF_BASE_VST_SRC_DIR} ${INF_BASE_VST_UI_SRC_DIR} ${INF_SYNTH_VST_GENERIC_SRC_DIR})
target_include_directories(infernal.synth.vst.generic SYSTEM PRIVATE ${VST3_SDK_SRC_DIR} ${VST3_SDK_SRC_DIR}/vstgui4)
target_link_libraries(infernal.synth.vst.generic infernal.base infernal.base.ui infernal.synth infernal.base.vst infernal.base.vst.ui)
target_link_libraries(infernal.synth.vst.generic debug "${VSTGUI_LIBRARIES_Debug}" optimized "${VSTGUI_LIBRARIES_Release}")
target_link_libraries(infernal.synth.vst.generic debug "${VST3_SDK_LIBRARIES_Debug}" optimized "${VST3_SDK_LIBRARIES_Release}")
target_link_libraries(infernal.synth.vst.generic "${VSTGUI_LINUX_LIBRARIES}")
set_target_properties(infernal.synth.vst.generic PROPERTIES OUTPUT_NAME "InfernalSynthGeneric")
if (MSVC)
set_target_properties(infernal.synth.vst.generic PROPERTIES SUFFIX ".vst3")
source_group(TREE "../../../${INF_SYNTH_VST_GENERIC_SRC_DIR}" FILES ${INF_SYNTH_VST_GENERIC_SRC})
target_compile_options(infernal.synth.vst.generic PRIVATE "SHELL:/external:I ${VST3_SDK_SRC_DIR}" "SHELL:/external:I ${VST3_SDK_SRC_DIR}/vstgui4")
set_target_properties(infernal.synth.vst.generic PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/dist/win32/$<$<CONFIG:Debug>:Debug>$<$<CONFIG:Release>:Release>/InfernalSynthGeneric.vst3/Contents/x86_64-win")
add_custom_target(copy-ui-synth-generic ALL DEPENDS infernal.synth.vst.generic COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/ui "${PROJECT_SOURCE_DIR}/dist/win32/$<$<CONFIG:Debug>:Debug>$<$<CONFIG:Release>:Release>/InfernalSynthGeneric.vst3/Contents/Resources/UI")
add_custom_target(copy-presets-synth-generic ALL DEPENDS infernal.synth.vst.generic COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/presets "${PROJECT_SOURCE_DIR}/dist/win32/$<$<CONFIG:Debug>:Debug>$<$<CONFIG:Release>:Release>/InfernalSynthGeneric.vst3/Contents/Resources/Presets")
else()
set_target_properties(infernal.synth.vst.generic PROPERTIES LIBRARY_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/dist/linux/${CMAKE_BUILD_TYPE}/InfernalSynthGeneric.vst3/Contents/x86_64-linux")
add_custom_target(copy-ui-synth-generic ALL DEPENDS infernal.synth.vst.generic COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/ui "${PROJECT_SOURCE_DIR}/dist/linux/${CMAKE_BUILD_TYPE}/InfernalSynthGeneric.vst3/Contents/Resources/UI")
add_custom_target(copy-presets-synth-generic ALL DEPENDS infernal.synth.vst.generic COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/presets "${PROJECT_SOURCE_DIR}/dist/linux/${CMAKE_BUILD_TYPE}/InfernalSynthGeneric.vst3/Contents/Resources/Presets")
endif()

# Inf synth vst versioned.
set(INF_SYNTH_VST_VERSIONED_SRC_DIR "src/inf.synth.vst")
file(GLOB_RECURSE INF_SYNTH_VST_VERSIONED_SRC "${INF_SYNTH_VST_VERSIONED_SRC_DIR}/*.*")
add_library(infernal.synth.vst.versioned SHARED ${INF_SYNTH_VST_VERSIONED_SRC})
target_compile_definitions(infernal.synth.vst.versioned PRIVATE -DINF_VERSIONED=1)
target_include_directories(infernal.synth.vst.versioned PRIVATE ${INF_BASE_SRC_DIR} ${INF_BASE_UI_SRC_DIR} ${INF_SYNTH_SRC_DIR} ${INF_SYNTH_UI_SRC_DIR} ${INF_BASE_VST_SRC_DIR} ${INF_BASE_VST_UI_SRC_DIR} ${INF_SYNTH_VST_GENERIC_SRC_DIR})
target_include_directories(infernal.synth.vst.versioned SYSTEM PRIVATE ${VST3_SDK_SRC_DIR} ${VST3_SDK_SRC_DIR}/vstgui4)
target_link_libraries(infernal.synth.vst.versioned infernal.base infernal.base.ui infernal.synth infernal.base.vst infernal.base.vst.ui)
target_link_libraries(infernal.synth.vst.versioned debug "${VSTGUI_LIBRARIES_Debug}" optimized "${VSTGUI_LIBRARIES_Release}")
target_link_libraries(infernal.synth.vst.versioned debug "${VST3_SDK_LIBRARIES_Debug}" optimized "${VST3_SDK_LIBRARIES_Release}")
target_link_libraries(infernal.synth.vst.versioned "${VSTGUI_LINUX_LIBRARIES}")
set_target_properties(infernal.synth.vst.versioned PROPERTIES OUTPUT_NAME "InfernalSynth${INFERNAL_VERSION}")
if (MSVC)
set_target_properties(infernal.synth.vst.versioned PROPERTIES SUFFIX ".vst3")
source_group(TREE "../../../${INF_SYNTH_VST_VERSIONED_SRC_DIR}" FILES ${INF_SYNTH_VST_VERSIONED_SRC})
target_compile_options(infernal.synth.vst.versioned PRIVATE "SHELL:/external:I ${VST3_SDK_SRC_DIR}" "SHELL:/external:I ${VST3_SDK_SRC_DIR}/vstgui4")
set_target_properties(infernal.synth.vst.versioned PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/dist/win32/$<$<CONFIG:Debug>:Debug>$<$<CONFIG:Release>:Release>/InfernalSynth${INFERNAL_VERSION}.vst3/Contents/x86_64-win")
add_custom_target(copy-ui-synth-versioned ALL DEPENDS infernal.synth.vst.versioned COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/ui "${PROJECT_SOURCE_DIR}/dist/win32/$<$<CONFIG:Debug>:Debug>$<$<CONFIG:Release>:Release>/InfernalSynth${INFERNAL_VERSION}.vst3/Contents/Resources/UI")
add_custom_target(copy-presets-synth-versioned ALL DEPENDS infernal.synth.vst.versioned COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/presets "${PROJECT_SOURCE_DIR}/dist/win32/$<$<CONFIG:Debug>:Debug>$<$<CONFIG:Release>:Release>/InfernalSynth${INFERNAL_VERSION}.vst3/Contents/Resources/Presets")
else ()
set_target_properties(infernal.synth.vst.versioned PROPERTIES LIBRARY_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/dist/linux/${CMAKE_BUILD_TYPE}/InfernalSynth${INFERNAL_VERSION}.vst3/Contents/x86_64-linux")
add_custom_target(copy-ui-synth-versioned ALL DEPENDS infernal.synth.vst.versioned COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/ui "${PROJECT_SOURCE_DIR}/dist/linux/${CMAKE_BUILD_TYPE}/InfernalSynth${INFERNAL_VERSION}.vst3/Contents/Resources/UI")
add_custom_target(copy-presets-synth-versioned ALL DEPENDS infernal.synth.vst.versioned COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/presets "${PROJECT_SOURCE_DIR}/dist/linux/${CMAKE_BUILD_TYPE}/InfernalSynth${INFERNAL_VERSION}.vst3/Contents/Resources/Presets")
endif()

# Inf tool vst ui generator and preset diff tool.
set(INF_TOOL_VST_SRC_DIR "src/inf.tool.vst")
file(GLOB_RECURSE INF_TOOL_VST_SRC "${INF_TOOL_VST_SRC_DIR}/*.*")
add_executable(infernal.tool.vst ${INF_TOOL_VST_SRC})
target_include_directories(infernal.tool.vst PRIVATE ${INF_BASE_SRC_DIR} ${INF_BASE_UI_SRC_DIR} ${INF_BASE_VST_SRC_DIR} ${INF_BASE_VST_UI_SRC_DIR} ${INF_TOOL_VST_SRC_DIR})
target_include_directories(infernal.tool.vst SYSTEM PRIVATE ${VST3_SDK_SRC_DIR} ${VST3_SDK_SRC_DIR}/vstgui4)
target_link_libraries(infernal.tool.vst infernal.base infernal.base.ui infernal.base.vst infernal.base.vst.ui)
target_link_libraries(infernal.tool.vst debug "${VSTGUI_LIBRARIES_Debug}" optimized "${VSTGUI_LIBRARIES_Release}")
target_link_libraries(infernal.tool.vst debug "${VST3_SDK_LIBRARIES_Debug}" optimized "${VST3_SDK_LIBRARIES_Release}")
target_link_libraries(infernal.tool.vst "${VSTGUI_LINUX_LIBRARIES}")
if (MSVC)
source_group(TREE "../../../${INF_TOOL_VST_SRC_DIR}" FILES ${INF_TOOL_VST_SRC})
target_compile_options(infernal.tool.vst PRIVATE "SHELL:/external:I ${VST3_SDK_SRC_DIR}" "SHELL:/external:I ${VST3_SDK_SRC_DIR}/vstgui4")
else ()
target_link_libraries(infernal.tool.vst dl)
endif()
